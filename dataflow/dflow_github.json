{
	"name": "dflow_github",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "emp_csv",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "filter_demo",
						"type": "DatasetReference"
					},
					"name": "sinkdemo"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          emp_id as integer,",
				"          Name as string,",
				"          Salary as integer,",
				"          dept_name as string,",
				"          country_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 filter(country_id == 'US' && Salary > 5000) ~> filter1",
				"filter1 select(mapColumn(",
				"          emp_id,",
				"          Name,",
				"          Salary,",
				"          dept_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 sort(asc(emp_id, true),",
				"     caseInsensitive: true) ~> sort1",
				"select1 derive(salary_rank = iif(Salary > 9000, \"HIGH Salary\", iif(Salary > 5000, \"Medium Salary\", \"Lower Salary\")),",
				"          New_Salary = Salary + (Salary*15/100)) ~> derivedColumn1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          SALARY as string,",
				"          DEPARTMENT_ID as string,",
				"          LOCATION_ID as string,",
				"          HIRE_DATE as string",
				"     ),",
				"     partitionFileNames:['emp_filter_demo.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkdemo"
			]
		}
	}
}